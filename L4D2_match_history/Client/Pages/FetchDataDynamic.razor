@page "/fetchdatadyn/{displayTemplateName}"
@using L4D2_match_history.Shared
@using CsvHelper
@using System.Text.RegularExpressions

@inject HttpClient Http

<h1>Player ranks</h1>

<p>Xếp hạng player.</p>

@if (playerRanks == null || displayTemplate == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @foreach (DisplayColumn col in displayTemplate.Columns)
                {
                    <th>
                        @if (col.Searchable)
                        {
                            @col.Title@(" ")<input @bind-value="SearchString" @bind-value:event="oninput" placeholder="" />
                        }
                        else if (col.Sortable)
                        {
                            <div @onclick="() => SortTable(col.PropertyName)">
                                @col.Title
                                @if (!string.IsNullOrEmpty(sortingProperty) && col.PropertyName == sortingProperty)
                                {
                                    <label>@sortDirection</label>
                                }
                            </div>
                        }
                        else
                        {
                            @col.Title
                        }
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var playerRank in filteredPlayerRanks)
            {
                <tr>
                    @foreach (DisplayColumn col in displayTemplate.Columns)
                    {
                        <td>
                            @{
                                string value = playerRank.GetType().GetProperty(col.PropertyName)?.GetValue(playerRank)?.ToString();
                                if (col.HasFormat)
                                {
                                    value = SubstituteValue(col.FormatString, playerRank);
                                }
                            }
                            @if (col.IsRawHtml)
                            {
                                @((MarkupString)value)
                            }
                            else
                            {
                                @value
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string displayTemplateName { get; set; }

    private DisplayTemplate displayTemplate;
    private PlayerRankView[] playerRanks;
    private IEnumerable<PlayerRankView> filteredPlayerRanks => playerRanks.Where(pr => pr.last_known_alias_unicode.RemoveDiacritics().ToLower().Contains(SearchString.RemoveDiacritics().ToLower()));
    private string SearchString = string.Empty;
    private string csvDisplayTemplate = string.Empty;
    private bool IsSortedAscending = false;
    private string sortDirection => IsSortedAscending ? "^" : "v";
    private string sortingProperty = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        playerRanks = await Http.GetFromJsonAsync<PlayerRankView[]>("PlayerRank");
        displayTemplate = await Http.GetFromJsonAsync<DisplayTemplate>($"DisplayTemplate/{displayTemplateName}");
    }

    protected override async Task OnParametersSetAsync()
    {
        displayTemplate = await Http.GetFromJsonAsync<DisplayTemplate>($"DisplayTemplate/{displayTemplateName}");
    }

    protected string SubstituteValue(string format, PlayerRankView playerRank)
    {
        Regex r = new Regex("({{\\S+}})");
        Match m = r.Match(format);
        string output = new string(format);

        while (m.Success)
        {
            var matched = m.Value;
            var coreMatched = matched.Substring(2, matched.Length - 4);
            output = output.Replace(matched, GetValue(playerRank, coreMatched));
            m = m.NextMatch();
        }
        return output;
    }

    protected string GetValue(PlayerRankView playerRank, string propertyName)
    {
        return playerRank.GetType().GetProperty(propertyName)?.GetValue(playerRank)?.ToString();
    }

    protected void SortTable(string columnName)
    {
        if (string.IsNullOrEmpty(columnName))
        {
            return;
        }

        sortingProperty = columnName;

        if (IsSortedAscending)
        {
            playerRanks = playerRanks.OrderByDescending(x => x.GetType()
                                                            .GetProperty(columnName)
                                                            .GetValue(x, null))
                                                            .ToArray();
        }
        else
        {
            playerRanks = playerRanks.OrderBy(x => x.GetType()
                                                    .GetProperty(columnName)
                                                    .GetValue(x, null))
                                                    .ToArray();
        }

        //Toggle this boolean
        IsSortedAscending = !IsSortedAscending;
    }
}