@page "/"
@using L4D2_match_history.Shared
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>L4D2 match history</h1>

<p>Lịch sử chơi L4D2.</p>

@if (matchs == null)
{
    <p><em>Loading...</em></p>
}
else if (matchs == null)
{
    <p><em>Please refresh page to fetch new data...</em></p>
}
else
{
    <i><span @onclick="Update">Last update @LastUpdate</span></i>
    <table class="table">
        <thead>
            <tr>
                <th><span class="sort-link" @onclick="() => SortTableByDate()">Date <label>@sortDirection</label></span></th>
                <th>Map<input @bind-value="SearchMap" @bind-value:event="oninput" placeholder="tên map" /></th>
                <th>Players</th>
                <th>Video</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var match in filteredMatchs)
            {
                <tr>
                    <td>@match.PlayDate.ToShortDateString()</td>
                    <td>@match.MapName</td>
                    <td>@string.Join(", ", match.Players)</td>
                    <td><a href="@match.VideoUrl">@match.VideoUrl</a><br /><img src="@match.VideoThumbnail" /></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private MatchInfo[] matchs;
    private string LastUpdate;
    private string RequestError;
    private IEnumerable<MatchInfo> filteredMatchs => matchs.Where(mi => mi.MapName.ToLower().Contains(SearchMap.ToLower()));
    private bool IsSortedAscending = false;
    private string sortDirection => IsSortedAscending ? "^" : "v";
    private string SearchMap = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var res = await Http.GetAsync("MatchInfo");
        if (res.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            await this.Update();
        }
        else if (res.IsSuccessStatusCode)
        {
            var datas = await res.Content.ReadFromJsonAsync<MatchInfos>();
            matchs = datas.Matchs;

            DateTime.TryParse(datas.lastUpdate, out DateTime lu);

            LastUpdate = lu.ToLocalTime().ToString("dd MMM yyyy hh:mm:ss tt");

            matchs = matchs.OrderByDescending(m => m.PlayDate).ToArray();
        }
        else
        {
            RequestError = res.ReasonPhrase;
        }
    }

    private async Task Update()
    {
        await Http.PutAsync("MatchInfo", null);
        this.RefreshPage();
    }

    protected void SortTableByDate()
    {
        SortTable("PlayDate");
    }

    protected void SortTable(string columnName)
    {

        if (IsSortedAscending)
        {
            matchs = matchs.OrderByDescending(x =>
            x.GetType()
            .GetProperty(columnName)
            .GetValue(x, null))
            .ToArray();
        }
        else
        {
            matchs = matchs.OrderBy(x =>
            x.GetType()
            .GetProperty(columnName)
            .GetValue(x, null))
            .ToArray();
        }

        //Toggle this boolean
        IsSortedAscending = !IsSortedAscending;
    }

    public void RefreshPage()
    {
        NavigationManager.NavigateTo("refresh");
    }

}
